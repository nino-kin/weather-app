# Commit message
#------------------------------------------------|
# Subject:                                       |
# - Separate subject from body with a blank line |
# - Limit the subject line to 50 characters      |
# - Capitalize the subject line                  |
# - Do not end the subject line with a period    |
# - Use the imperative mood in the subject line  |
#------------------------------------------------|
# feat: 
# fix: 
# docs: 
# ci: 
# style: 
# refactor: 
# perf: 
# chore: 
# test: 
# build: 

#----------------------------------------------------------------------|
# Body:                                                                |
# - Wrap the body at 72 characters                                     |
# - Use the body to explain what and why vs. how                       |
#----------------------------------------------------------------------|
# body start

# body end

#----------------------------------------------------------------------|
# Footer:                                                              |
# - One or more footers MAY be provided one blank line after the body. |
#----------------------------------------------------------------------|
# Breaking changes:                                                    |
# - A BREAKING CHANGE commit introduces a breaking API change          |
# - Breaking changes MUST be indicated                                 |
#----------------------------------------------------------------------|
# BREAKING CHANGE: 

#----------------------------------------------------------------------|
# Issue Key:                                                           |
# - Connecting Jira Software to supported development tools like       |
#   Bitbucket, GitHub, GitLab, and others.                             |
# - Multiple issues have to be a issue followed by a comma or a space. |
#----------------------------------------------------------------------|
# issue: 


#------------------------------ Reference ------------------------------

#----------------------------------------------------------------------|
# Format                                                               |
#----------------------------------------------------------------------|
# <type>(<scope>): <subject>
# <BLANK LINE>
# <body>
# <BLANK LINE>
# <footer>
#----------------------------------------------------------------------|
# Example                                                              |
#----------------------------------------------------------------------|
# feat: Allow provided config object to extend other configs
#
# Introduce a request id and a reference to latest request. Dismiss
# incoming responses other than from latest request.
#
# BREAKING CHANGE: `extends` key in config file is now used for
# extending other config files

#----------------------------------------------------------------------|
# Commit type                                                          |
#----------------------------------------------------------------------|
# feat: A new feature
# fix: Fixed a bug
# docs: Documentation only changes
# style: Changes to styling like white space, formatting, semi-colons
# refactor: Refactors production code, A code change that neither fixes a bug nor adds a feature (e.g. renaming a variable)
# ci: Changes made to the CI configuration like Travis, Circle, Actions
# perf: A code change that improves performance
# test: Add or fix tests; no production code change
# chore: Changes to the build process or auxiliary tools and libraries such as documentation generation
# build: Changes that affect the build system or external dependencies (e.g. gulp, broccoli, npm)

#----------------------------------------------------------------------|
# Rules                                                                |
#----------------------------------------------------------------------|
# ==== The Seven Rules ====
# 1. Separate subject from body with a blank line
# 2. Limit the subject line to 50 characters
# 3. Capitalize the subject line
# 4. Do not end the subject line with a period
# 5. Use the imperative mood in the subject line
# 6. Wrap the body at 72 characters
# 7. Use the body to explain what and why vs. how
#
# How to Write a Git Commit Message http://chris.beams.io/posts/git-commit/
#
# for http://memo.goodpatch.co/2016/07/beautiful-commits-with-emojis/





# Reference
# Conventional Commits 1.0.0
#   https://www.conventionalcommits.org/ja/v1.0.0/
#
# AngularJS Git Commit Message Conventions
#   https://gist.github.com/stephenparish/9941e89d80e2bc58a153
#
#---------------------------------
# Capitalized, short (50 chars or less) summary
#
# More detailed explanatory text, if necessary.  Wrap it to about 72
# characters or so.  In some contexts, the first line is treated as the
# subject of an email and the rest of the text as the body.  The blank
# line separating the summary from the body is critical (unless you omit
# the body entirely); tools like rebase will confuse you if you run the
# two together.
#
# Write your commit message in the imperative: "Fix bug" and not "Fixed bug"
# or "Fixes bug."  This convention matches up with commit messages generated
# by commands like git merge and git revert.
#
# Further paragraphs come after blank lines.
#
# - Bullet points are okay, too
#
# - Typically a hyphen or asterisk is used for the bullet, followed by a
#   single space, with blank lines in between, but conventions vary here
#
# - Use a hanging indent
#---------------------------------
